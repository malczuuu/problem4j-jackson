import com.diffplug.spotless.LineEnding

plugins {
    id("java-library")
    id("maven-publish")
    id("com.diffplug.spotless") version "7.2.1"
}

group = "com.github.malczuuu"

/**
 * Conditional approach to versioning. If `-Pversion=...` is specified on the command line, it will be used as the
 * version. Otherwise, the version is derived from the git tag and build number.
 */
if (version == null || version == "unspecified") {
    version = Versioning.getSnapshotVersion(rootProject.rootDir)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

dependencies {
    api("com.fasterxml.jackson.core:jackson-databind:2.19.2")

    api("com.github.malczuuu:problem4j-core:3.1.0")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.13.4")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.13.4")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.13.4")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.13.4")
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

spotless {
    format "misc", {
        target "*.gradle", ".gitattributes", ".gitignore"

        trimTrailingWhitespace()
        leadingTabsToSpaces(4)
        endWithNewline()
        lineEndings = LineEnding.UNIX
    }

    format "yaml", {
        target "**/*.yml", "**/*.yaml"

        trimTrailingWhitespace()
        leadingTabsToSpaces(2)
        endWithNewline()
        lineEndings = LineEnding.UNIX
    }

    java {
        target "src/**/*.java"

        googleJavaFormat("1.28.0")
        lineEndings = LineEnding.UNIX
    }

    groovy {
        target "src/**/*.groovy"

        greclipse()
        lineEndings = LineEnding.UNIX
    }
}

tasks.register("printVersion") {
    doLast {
        println "Project version: ${version}"
    }
}

tasks.named("test") {
    useJUnitPlatform()
}
